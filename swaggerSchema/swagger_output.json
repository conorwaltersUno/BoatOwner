{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "BoatOwner",
    "description": ""
  },
  "servers": [
    {
      "url": "https://localhost:3010"
    }
  ],
  "basePath": "",
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    },
    {
      "name": "Boat",
      "description": "Endpoints"
    },
    {
      "name": "log",
      "description": "Endpoints"
    },
    {
      "name": "Task",
      "description": "Endpoints"
    }
  ],
  "paths": {
    "/users/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAllUserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Sign up",
        "description": "",
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "P@ssw0rd"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "NewP@ssw0rd"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/sign-in": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Sign-in",
        "description": "",
        "responses": {
          "201": {
            "description": "Signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signInUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "P@ssw0rd"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/users/token": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get a new refresh token from access token",
        "description": "",
        "responses": {
          "200": {
            "description": "New Access Token generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessToken"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7InVzZXJpZCI6NH0sImlhdCI6MTcyNDE1MDU1OCwiZXhwIjoxNzI0MTUyMzU4fQ.Gy2YtEi8dY419wPzcxQ1EkR5MNkNXRlSP6tZOeMNJtQ"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boat/": {
      "get": {
        "tags": [
          "Boat"
        ],
        "summary": "Get all boats",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of boats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAllBoatsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Boat"
        ],
        "summary": "Create a new boat",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Boat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createBoatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "New Boat"
                  },
                  "model": {
                    "type": "string",
                    "example": "Z300"
                  }
                },
                "required": [
                  "user_id",
                  "name",
                  "model"
                ]
              }
            }
          }
        }
      }
    },
    "/boat/{id}": {
      "get": {
        "tags": [
          "Boat"
        ],
        "summary": "Get boat by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved boat data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBoatByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Boat"
        ],
        "summary": "Update an existing boat",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boat updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateBoatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Updated Boat"
                  },
                  "model": {
                    "type": "string",
                    "example": "Z300"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Boat"
        ],
        "summary": "Delete a boat",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Boat deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logs/": {
      "get": {
        "tags": [
          "log"
        ],
        "summary": "Get all logs",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAllLogsResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logs/boat/{boat_id}": {
      "get": {
        "tags": [
          "log"
        ],
        "summary": "Get logs by boat ID",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved logs for the boat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getLogsByBoatIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logs/{id}": {
      "get": {
        "tags": [
          "log"
        ],
        "summary": "Get log by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Log ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved log data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getLogByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Log not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "log"
        ],
        "summary": "Update an existing log",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Log ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Log not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateLogDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "log"
        ],
        "summary": "Delete a log",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Log ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Log deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Log not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logs/coordinates": {
      "post": {
        "tags": [
          "log"
        ],
        "summary": "Add coordinates to a log",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coordinates added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addCoordinatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Log not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addCoordinatesDTO"
              }
            }
          }
        }
      }
    },
    "/logs/{boat_id}": {
      "post": {
        "tags": [
          "log"
        ],
        "summary": "Create a new log",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Log created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createLogDTO"
              }
            }
          }
        }
      }
    },
    "/tasks/": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get all tasks",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAllTasksResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get task by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved task data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTaskByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update an existing task",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTaskDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete a task",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tasks/boat/{boat_id}/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get tasks by boat ID",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tasks for the boat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTasksByBoatIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tasks/{boat_id}": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new task",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTaskDTO"
              }
            }
          }
        }
      }
    },
    "/expenses/": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get all expenses",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of expenses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAllExpensesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/expenses/{id}": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get expense by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Expense ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved expense data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpenseByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Expense not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Expense"
        ],
        "summary": "Update an existing expense",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Expense ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expense updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateExpenseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Expense not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateExpenseDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Expense"
        ],
        "summary": "Delete an expense",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Expense ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expense deleted successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Expense not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/expenses/boat/{boat_id}/expenses": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Get expenses by boat ID",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved expenses for the boat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getExpensesByBoatIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Boat not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/expenses/{boat_id}": {
      "post": {
        "tags": [
          "Expense"
        ],
        "summary": "Create a new expense",
        "description": "",
        "parameters": [
          {
            "name": "boat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Boat ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Expense created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createExpenseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createExpenseDTO"
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "userDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "email@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "$2b$08$mdR4psJFv41YzWl0YX0BQu5l78QDPCxTbr02YcM/i1pK4qbXmNwsC$2b$08$$2b$08$mdR4psJFv41YzWl0YX0BQu5l78QDPCxTbr02YcM/i1pK4qbXmNwsC/i1pK4qbXmNwsC"
          }
        }
      },
      "createUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "$2b$08$mdR4psJFv41YzWl0YX0BQu5l78QDPCxTbr02YcM/i1pK4qbXmNwsC"
          }
        }
      },
      "updateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "$2b$08$mdR4psJFv41YzWl0YX0BQu5l78QDPCxTbr02YcM/i1pK4qbXmNwsC"
          }
        }
      },
      "accessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7InVzZXJpZCI6Nn0sImlhdCI6MTcyNDE0NzY3MSwiZXhwIjoxNzI0MTQ5NDcxfQ.ZiMYxY71XFBQ49xrygh5LLufxm-ApVRoZa5A1_4nhmA"
          }
        }
      },
      "refreshToken": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7InVzZXJpZCI6Nn0sImlhdCI6MTcyNDE0NzY3MSwiZXhwIjoxNzI2NzM5NjcxfQ.AHT6JI6MQgg39AJtPBQhEDqt0TuUAKda-wF9fINKHSk"
          }
        }
      },
      "getAllUserResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/userDTO"
        }
      },
      "getUserByIdResponse": {
        "$ref": "#/components/schemas/userDTO"
      },
      "createUserResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/accessToken/properties/accessToken"
          },
          "refreshToken": {
            "$ref": "#/components/schemas/refreshToken/properties/refreshToken"
          },
          "user": {
            "$ref": "#/components/schemas/userDTO"
          }
        }
      },
      "updateUserResponse": {
        "$ref": "#/components/schemas/userDTO"
      },
      "signInUserResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/accessToken/properties/accessToken"
          },
          "refreshToken": {
            "$ref": "#/components/schemas/refreshToken/properties/refreshToken"
          }
        }
      },
      "boatDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "user_id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Boaty McBoatface"
          },
          "model": {
            "type": "string",
            "example": "X200"
          }
        }
      },
      "createBoatDTO": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "New Boat"
          },
          "model": {
            "type": "string",
            "example": "Z300"
          }
        }
      },
      "updateBoatDTO": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Updated Boat"
          },
          "model": {
            "type": "string",
            "example": "Z300"
          }
        }
      },
      "getAllBoatsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/boatDTO"
        }
      },
      "getBoatByIdResponse": {
        "$ref": "#/components/schemas/boatDTO"
      },
      "createBoatResponse": {
        "$ref": "#/components/schemas/boatDTO"
      },
      "updateBoatResponse": {
        "$ref": "#/components/schemas/boatDTO"
      },
      "logDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "boat_id": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Departed from dock"
          },
          "crew_members": {
            "type": "array",
            "example": [
              "Alice",
              "Bob"
            ],
            "items": {
              "type": "string"
            }
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "example": 34.0522
                },
                "y": {
                  "type": "number",
                  "example": -118.2437
                }
              }
            }
          },
          "photo_urls": {
            "type": "array",
            "example": [
              "http://example.com/photo1.jpg",
              "http://example.com/photo2.jpg"
            ],
            "items": {
              "type": "string"
            }
          },
          "log_started": {
            "type": "string",
            "example": "2023-07-01T08:00:00Z"
          },
          "log_ended": {
            "type": "string",
            "example": "2023-07-01T12:00:00Z"
          },
          "created_on": {
            "type": "string",
            "example": "2023-07-01T08:00:00Z"
          },
          "isrecordinglocation": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "createLogDTO": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "New log entry"
          },
          "crew_members": {
            "type": "array",
            "example": [
              "Eve",
              "Frank"
            ],
            "items": {
              "type": "string"
            }
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "example": 34.0522
                },
                "y": {
                  "type": "number",
                  "example": -118.2437
                }
              }
            }
          },
          "photo_urls": {
            "type": "array",
            "example": [
              "http://example.com/photo5.jpg",
              "http://example.com/photo6.jpg"
            ],
            "items": {
              "type": "string"
            }
          },
          "log_started": {
            "type": "string",
            "example": "2023-07-03T07:00:00Z"
          },
          "log_ended": {
            "type": "string",
            "example": "2023-07-03T11:00:00Z"
          },
          "isrecordinglocation": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "updateLogDTO": {
        "type": "object",
        "properties": {
          "boat_id": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Updated log entry"
          },
          "crew_members": {
            "type": "array",
            "example": [
              "George",
              "Hannah"
            ],
            "items": {
              "type": "string"
            }
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "example": 34.0522
                },
                "y": {
                  "type": "number",
                  "example": -118.2437
                }
              }
            }
          },
          "photo_urls": {
            "type": "array",
            "example": [
              "http://example.com/photo7.jpg",
              "http://example.com/photo8.jpg"
            ],
            "items": {
              "type": "string"
            }
          },
          "log_started": {
            "type": "string",
            "example": "2023-07-04T08:00:00Z"
          },
          "log_ended": {
            "type": "string",
            "example": "2023-07-04T12:00:00Z"
          },
          "isrecordinglocation": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "addCoordinatesDTO": {
        "type": "object",
        "properties": {
          "log_id": {
            "type": "number",
            "example": 1
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "example": 34.0522
                },
                "y": {
                  "type": "number",
                  "example": -118.2437
                }
              }
            }
          }
        }
      },
      "getAllLogsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/logDTO"
        }
      },
      "getLogsByBoatIdResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/logDTO"
        }
      },
      "getLogByIdResponse": {
        "$ref": "#/components/schemas/logDTO"
      },
      "createLogResponse": {
        "$ref": "#/components/schemas/logDTO"
      },
      "updateLogResponse": {
        "$ref": "#/components/schemas/logDTO"
      },
      "addCoordinatesResponse": {
        "$ref": "#/components/schemas/logDTO"
      },
      "taskDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "boat_id": {
            "type": "number",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "Departed from dock"
          },
          "status": {
            "type": "string",
            "example": "To Complete"
          },
          "created_on": {
            "type": "string",
            "example": "2023-07-04T12:00:00Z"
          }
        }
      },
      "createTaskDTO": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Departed from dock"
          },
          "status": {
            "type": "string",
            "example": "To Complete"
          },
          "created_on": {
            "type": "string",
            "example": "2023-07-04T12:00:00Z"
          }
        }
      },
      "getAllTasksResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/taskDTO"
        }
      },
      "getTasksByBoatIdResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/taskDTO"
        }
      },
      "getTaskByIdResponse": {
        "$ref": "#/components/schemas/taskDTO"
      },
      "createTaskResponse": {
        "$ref": "#/components/schemas/taskDTO"
      },
      "updateTaskResponse": {
        "$ref": "#/components/schemas/taskDTO"
      },
      "expensesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "boat_id": {
            "type": "number",
            "example": 1
          },
          "expense_type": {
            "type": "string",
            "example": "Fuel"
          },
          "amount": {
            "type": "number",
            "example": 500
          },
          "expense_date": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          },
          "created_on": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          }
        }
      },
      "createExpenseDTO": {
        "type": "object",
        "properties": {
          "expense_type": {
            "type": "string",
            "example": "Fuel"
          },
          "amount": {
            "type": "number",
            "example": 500
          },
          "expense_date": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          },
          "created_on": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          }
        }
      },
      "updateExpenseDTO": {
        "type": "object",
        "properties": {
          "boat_id": {
            "type": "number",
            "example": 1
          },
          "expense_type": {
            "type": "string",
            "example": "Fuel"
          },
          "amount": {
            "type": "number",
            "example": 500
          },
          "expense_date": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          },
          "created_on": {
            "type": "string",
            "example": "2023-08-01T09:00:00Z"
          }
        }
      },
      "getAllExpensesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/expensesDTO"
        }
      },
      "getExpenseByIdResponse": {
        "$ref": "#/components/schemas/expensesDTO"
      },
      "getExpensesByBoatIdResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/expensesDTO"
        }
      },
      "createExpenseResponse": {
        "$ref": "#/components/schemas/expensesDTO"
      },
      "updateExpenseResponse": {
        "$ref": "#/components/schemas/expensesDTO"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}